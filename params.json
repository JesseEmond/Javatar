{"name":"Javatar","tagline":"Java Development Plugin for Sublime Text 3","body":"## Javatar\r\n\r\n### Status: Beta\r\n\r\nA Sublime Text 3 Plugin for Java Development\r\n\r\n====\r\n\r\n### Table of Contents\r\n* Features\r\n* Important Updates\r\n* Screenshots\r\n* Command Categories\r\n* Javatar Builds\r\n* Javatar Calls\r\n* Advanced Creations\r\n* Javatar Operations\r\n* Default Package Detection\r\n* Installation\r\n* Settings\r\n* Key Bindings\r\n* Build System\r\n* Javatar Snippets\r\n* Javatar Packages\r\n* Additional Packages\r\n* Package Channels\r\n* Actions History\r\n\r\n### Features\r\n* [+] Package, Subpackage creation\r\n* [+] Class (also Abstract), Interface, Enumerator snippets with package/class auto-complete\r\n* [+] Project Compile\r\n* [+] Package path in status bar\r\n* [*] Organize Imports\r\n* [*] Rename/Move packages/classes\r\n* [-] JAR file export (included executable)\r\n* [-] Dynamic method call auto-complete\r\n\r\n[+] Available on Stable Channel<br />\r\n[*] Partial available on Development Channel<br />\r\n[-] Planned\r\n\r\n====\r\n\r\n### Important Updates\r\n\r\nFrom 15 Jan 2014, Javatar will include full Java SE7 class list inside its package. This will take a little longer to install/update Javatar. For another Java version, please check out Additional Packages section.\r\n\r\n##### Development Build\r\n* Organize Imports now use all references from Javatar Packages\r\n* Organize Imports improvements\r\n* Javatar Imports has been removed from Javatar. If you are using it, please convert all imports file using *Development Section... > Convert Imports*\r\n* Manual package input box will append class name automatically when imported\r\n\r\n##### Stable Build\r\n* New key bindings, please check out Key Bindings section for more info\r\n* Startup time improvement for Stable channel\r\n* Default imports has been removed from settings. If you want to import your own package, use Javatar Packages instead (Check out Javatar Packages section)\r\n\r\n====\r\n\r\n### Screenshots\r\n##### Creating packages in action\r\n![CreatePackage](http://spywhere.github.io/images/PackageCreate.gif)\r\n##### Creating classes in action\r\n![CreateClass](http://spywhere.github.io/images/ClassCreate.gif)\r\n##### Creating other classes in action\r\n![CreateOther](http://spywhere.github.io/images/OtherClassCreate.gif)\r\n##### Class operations in action\r\n![Operation](http://spywhere.github.io/images/Operations.gif)\r\n\r\n====\r\n\r\n### Command Categories\r\n* Build: Accessed via command palette only\r\n\t* Build classes within package or project\r\n\t* More details on Javatar Builds\r\n* Call:\r\n\t* Insert class and package informations such as current class path, class name or package name\r\n\t* More details on Javatar Calls\r\n* Creation: Accessed via command palette only\r\n\t*  Packages and classes creation\r\n\t* More details on Advanced Creations\r\n* Operation:\r\n\t* Do class or package operation such as organize imports, rename class or package\r\n\t* More details on Javatar Operations\r\n\r\n====\r\n\r\n### Javatar Builds\r\nJavatar use its own build system which based on default Sublime Text's JavaC build settings.\r\n\r\n**Important!** When build on a project or package, Javatar cannot show any compilation error (or may show only last run built) since it builds all your classes in order. More details about build system is on Build System.\r\n\r\n### Javatar Calls\r\nJavatar Calls are use to insert class or package informations at cursor point. Javatar supports 4 types of informations to insert which are `Full Package Path`, `Current Package Path`, `Full Class Name` and `Class Name`.\r\n\r\n### Advanced Creations\r\nIn create menu, all packages and classes will be created relative to current package unless specified by `~` (tilde) before package or class path. See examples below...\r\n\r\nInput: `Alpha`<br />\r\nResult as Class: `Class \"Alpha\" is created in current pacakge`<br />\r\nResult as Package: `Package \"Alpha\" is created in current package`\r\n\r\nInput: `~Beta`<br />\r\nResult as Class: `Class \"Beta\" is created in default pacakge`<br />\r\nResult as Package: `Package \"Beta\" is created in default package`\r\n\r\nInput: `me.spywhere.Alpha`<br />\r\nResult as Class: `Class \"Alpha\" is created in \"(current package).me.spywhere\" package`<br />\r\nResult as Package: `Package \"Alpha\" is created in \"(current package).me.spywhere\" package`\r\n\r\nInput: `~me.spywhere.Beta`<br />\r\nResult as Class: `Class \"Beta\" is created in \"me.spywhere\"`<br />\r\nResult as Package: `Package \"Beta\" is created in \"me.spywhere\"`\r\n\r\n### Javatar Operations\r\nJavatar Operations help you do class or package operations, such as organize imports or rename class, easier. Currently, Javatar has 2 operations, `Correct Class` and `Organize Imports`.\r\n\r\n##### Correct Class\r\nJavatar will search for current package and your class name based on file name and location of current file and correct it on first class.\r\n\r\n##### Organize Imports\r\nJavatar will automatically imports all necessary packages and remove unused packages for you. This is done within 7 sub-steps.\r\n\r\n1. Javatar gathering imports informations from current file\r\n2. Javatar let's you select a package that has the same class\r\n3. Javatar imports \"default imports\" and Java's packages\r\n4. Javatar asks you to enter package name for missing classes\r\n5. Javatar asks for package name that you want to enter manually\r\n6. Javatar clear all imports in current file\r\n7. Javatar imports all packages that has been processed within step 1-4\r\n\r\n====\r\n\r\n###  Default Package Detection\r\nJavatar will specify default package with these steps...\r\n\r\n1. Project folder in your project file (when open project or folder)\r\n2. Folder contains current file (when open file)\r\n3. Specify current package as `(Unknown Package)`\r\n\r\nJavatar will refuse to create packages or classes within unknown package. In this case, mostly because current file is not on the disk yet.\r\n\r\n====\r\n\r\n### Installation\r\n##### Package Control (Recommended)\r\nOpen command palette and type `Install Package` then type `Javatar` and hit Enter/Return. Package Control will automatically download, install and update for you.\r\n\r\n##### \"git\" Command\r\nOpen your favourite Terminal application, browse to PACKAGES_PATH and run this command.\r\n\r\n\tgit clone git://github.com/spywhere/Javatar.git\r\n\r\n##### Manual Install\r\nDownload .zip file from Javatar repository and browse to PACKAGES_PATH, extract .zip file and rename folder to `Javatar`, restart Sublime Text if you are currently open.\r\n\r\n**Note!** PACKAGES_PATH is referred to folder which can be accessed via the *Preferences > Browse Packages...*\r\n\r\n====\r\n\r\n### Settings\r\nSettings can be accessed via the *Preferences > Package Settings > Javatar* or via command palette by type *\"Preference Javatar\"*.\r\n\r\nDefault settings should not be modified. However, you can copy the relevant settings into Javatar's user settings file.\r\n\r\n====\r\n\r\n### Key Bindings\r\nKey bindings can be accessed via the preference menu or via command palette same as settings.\r\n\r\n##### Default Key Binding\r\n*All commands start with `Key+Shift+K` then follows by their shortcut key.*\r\n\r\n* Browse Commands... : `Key+Shift+K`\r\n\t* This will open quick panel, showing you all commands available to use.\r\n* Help and Support... : `Key+Shift+H`\r\n\t* This will open quick panel, showing you all utilities that help solve the issue. (mostly requested to do by developer)\r\n* Builds... : `Key+Shift+B`\r\n\t* This will open quick panel to select which build you want to perform.\r\n* Calls... : `Key+Shift+J`\r\n\t* This will open quick panel to select which information you want to insert.\r\n* Operations... : `Key+Shift+O`\r\n\t* This will open quick panel to select which operation you want to perform.\r\n* Create new... : `Key+Shift+N`\r\n    * This will open quick panel, showing you all possible types to create.\r\n* Create new package : `Key+Shift+P`\r\n\t* This will open input panel, just like when you create a new package.\r\n* Organize Imports : `Key+Shift+I` (Only on development channel)\r\n\t* This will organize imports on current file.\r\n\r\n====\r\n\r\n### Build System\r\nJavatar's build system use Sublime Text execute command to build your classes. Javatar build parameters are based on default Sublime Text's JavaC build settings. You can change the build command via Javatar settings file.\r\n\r\n### Javatar Snippets\r\n\r\nJavatar snippets is a dynamic snippet which will change part of the file to correspond with package path and class name. By using macros, you can specify which part of the file you want to fill the data to.\r\n\r\nYou can make your own snippet to use within Javatar by create a new file ends with `.javatar`\r\n\r\nSnippet class tags (for more informations about snippet tags, see below) will be used as a type of classes which show in input panel when create a new file (`%type% Name:`), on error dialog (`%type% %name% already exists`) and in status bar when file was created (`%type% %name% is created within package %package%`).\r\n\r\nExample of Javatar's snippets is inside Javatar's snippets folder (`PACKAGES_PATH/Javatar/snippets` or similar)\r\n\r\n#### Snippet Tags\r\n\r\nThe following tags are used inside Javatar snippet files (*.javatar) which will be used by Javatar to display proper command to the user\r\n\r\n* %class:*TYPE OF CLASS*%\r\n* %description:*DESCRIPTION TO SHOW UNDER CREATION COMMAND*%\r\n\r\n##### Usage of snippet tags in action\r\n![CreateNewSS](http://spywhere.github.io/images/CreateNewSS.png)\r\n\r\n\r\n#### Snippet Macros\r\nThe following macros are used inside Javatar snippet files (*.javatar) which will be parsed by Javatar and Sublime Text.\r\n\r\n* %package_path% = Package path\r\n* %class% = Class name\r\n* %file% = File path\r\n* %file_name% = File name (equivalent to `%class%.java`)\r\n* %package% = Package code (for example `package java.utils;` or same as `package %packages_path%;`)\r\n* All Sublime Text's snippet macros can be used within Javatar snippets. For example: ${1} or ${2://Comment}\r\n\r\n### Javatar Packages\r\nJavatar required packages file (*.javatar-packages) to correctly import necessary Java's packages. These files contain all classes, fields, methods and packages to use with Javatar.\r\n\r\nJavatar Packages file is a JSON file. You can read more details about each key and value in Proto.javatar-packages located within Javatar's Java folder.\r\n\r\nHowever, their are 2 special keys that is not normally used within Javatar Packages which are...\r\n\r\n* experiment\r\n\t* Set this to `true` to exclude this package from Javatar's packages list.\r\n* always_import\r\n\t* Set this to `true` to always import this package even no class is used (this will import as `package.*`).\r\n\r\nBoth keys are boolean type and also optional to use.\r\n\r\nExample of Javatar Packages is located inside Javatar's Java folder (`PACKAGES_PATH/Javatar/Java`)\r\n\r\n### Additional Packages\r\nBy default, Javatar package will include Java SE7 class list inside its package. This will make Javatar take a little longer to install/update from Package Control. For other Java version, you can check out a link to additional package inside *Help and Support > Additional Packages* menu.\r\n\r\n### Package Channels\r\n#### Stable Channel\r\nStable channel is a default channel for every user who installed Javatar. This channel will release only fully working features and hide all incomplete features.\r\n\r\n#### Development Channel\r\nDevelopment channel is a optional channel for user who want to try upcoming features which may not fully working or need improvements. All upcoming features will appear in *Javatar: Browse Commands > Development Section* only.\r\n\r\nPlease note that stable channel update notes also apply on development channel too.\r\n\r\n#### Package Updates Notifications\r\nIn order to notice important notes to all users, in stable channel or development channel or both, Javatar use custom notification system which will notice you *only once* when Javatar is ready to use. You can opt out this notification by settings `message_id` to `-1` in Javatar's user settings file, note that you can see update notes in README file or you will miss further important update notes.\r\n \r\n### Actions History\r\nActions History tracks how you use Javatar and helps solve the problem. By provides useful informations as request by developer (only when you submit an issue). A Javatar Action History Report will looks like this when using it properly...\r\n\r\n\t## Javatar Report\r\n\t### System Informations\r\n\t* Javatar Version: `13.10.27.0.59b`\r\n\t* Sublime Version: `3047`\r\n\t* Package Path: `/Users/spywhere/Library/Application Support/Sublime Text 3/Packages`\r\n\t* Javatar Channel: `dev`\r\n\t* Sublime Channel: `stable`\r\n\t* Platform: `osx`\r\n\t* As Packages: `True`\r\n\t* Package Control: `True`\r\n\t* Architecture: `x64`\r\n\t* Javatar's Parent Folder: `Javatar`\r\n\t* Is Project: `True`\r\n\t* Is File: `True`\r\n\t* Is Java: `True`\r\n\r\n\t### Action List\r\n\t1. Startup\r\n\t2. Reset all settings\r\n\t3. Reset all snippets\r\n\t4. Read settings\r\n\t5. Load snippets\r\n\t6. Javatar Snippet AbstractClass.javatar loaded\r\n\t7. Analyse snippet [file=/Users/spywhere/Library/Application Support/Sublime Text 3/Packages/Javatar/snippets/AbstractClass.javatar]\r\n\t8. Javatar Snippet Class.javatar loaded\r\n\t9. Analyse snippet [file=/Users/spywhere/Library/Application Support/Sublime Text 3/Packages/Javatar/snippets/Class.javatar]\r\n\t10. Javatar Snippet Enumerator.javatar loaded\r\n\t11. Analyse snippet [file=/Users/spywhere/Library/Application Support/Sublime Text 3/Packages/Javatar/snippets/Enumerator.javatar]\r\n\t12. Javatar Snippet Interface.javatar loaded\r\n\t13. Analyse snippet [file=/Users/spywhere/Library/Application Support/Sublime Text 3/Packages/Javatar/snippets/Interface.javatar]\r\n\t14. Check news\r\n\t15. Ready\r\n\r\nJavatar **do not** automatically send these informations. You have to reply an issue with these informations yourself.\r\n\r\nActions History can be disabled by settings `enable_actions_history` to `false`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}