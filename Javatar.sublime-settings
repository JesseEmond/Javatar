{
	// Per-project settings can be set in .sublime-project file

	//////////////////////
	// Javatar Settings //
	//////////////////////

	// Debugging purpose:
	"debug_mode" : false,

	// Javatar general purpose value
	"javatar_gp": 0,

	// Package Subscription:
	//    dev = Developer release (contains new features, bugs and also debugging messages enabled)
	//    otherwise = Stable release (safe to use, only stable feature enabled)
	"package_channel" : "stable",

	// Automatically send statistics and usages informations
	"send_stats_and_usages" : true,

	// Update message id
	//    -1 = Unsubscribe to important package updates notification (you should check out the README file for any updates information)
	//    any other number = Assigned by package to show you proper updates message
	"message_id" : 0,

	// Enable Actions History to help developer solve the issue
	"enable_actions_history" : true,

	// Maximum waiting time for Javatar packages creation
	"maximum_waiting_time": 15,

	// Default delay before hide a status text
	"status_delay" : 5000,

	// Show package path in status bar
	"show_package_path" : true,

	// Source folder (used as default package), must specified in full path
	// Default is...
	//    - Project-based source folder
	//    - Top most directory/folder
	//    - Current directory/folder
	"source_folder" : "",

	// Dependency .jar files, use when build
	"dependencies" : [],

	// Initial directory for finding dependencies
	"dependencies_path" : "$project_dir",

	///////////////////
	// Java Settings //
	///////////////////

	// JDK installation path, should contains "jdk1.<major>.0_<minor>" folder or similar
	// Javatar will use this path to detect your JDK installations and let's you select version you want to use
	// Name should be your os name that get from sublime.platform(), value is a list of path of JDK
	// Javatar will use current JDK that you are using, otherwise it will use latest version you have
	//
	// References: http://docs.oracle.com/javase/8/docs/technotes/guides/install/index.html
	"jdk_installation" : {
		"osx" : ["/Library/Java/JavaVirtualMachines"],
		"windows" : ["C:\\Program Files\\Java", "C:\\Program Files (x86)\\Java"],
		"linux" : ["/usr/jdk"],
		"all" : ["/usr/jdk"]
	},

	// List of JDK path that Javatar detected and currently use
	// This should be READ-ONLY unless you know what you are doing
	"jdk_version" : {},

	// Executables that Javatar use to build and run
	"java_executables" : {
		"build" : "javac",
		"run" : "java",
		"version": "java"
	},

	////////////////////////////
	// Run and Build Settings //
	////////////////////////////

	// Enable automatic save before build
	"automatic_save" : false,

	// Location to run "run" command
	"run_location" : "$project_dir",

	// Run command
	"run_command" : "$classpath $full_class_path",

	// Location to run "build" command
	"build_location" : "$project_dir",

	// Build output (class files) location
	//    Specified here and Javatar will create target path and reference by -d flag in build_command
	//    "javac" don't create target directory as default
	//    In this case, "%project_directory%/bin"
	"build_output_location" : "$project_dir$sepbin",

	// Build command
	"build_command" : "$sourcepath $classpath $d \"$file\"",

	// Number of build thread
	//    Increase this value can helps building done faster but also use more performances
	"parallel_build" : 2,

	// Build log view creation delay (in second)
	//    Increase this value can helps prevent double view from showing but also freeze computer for a specified time
	"build_log_delay" : 0.05,

	//////////////////////////////////
	// Javatar Validations Settings //
	//////////////////////////////////

	// Java file extensions
	"java_extensions" : [".java"],

	// Java source code validation using scope selector
	"java_source_selector" : "source.java",

	// Java version matching using RegEx (get from java -version)
	"java_version_match" : "(\\d+.\\d+.\\d+)_?([0-9a-zA-Z]+)?",

	// Method call replacement pattern using RegEx (Use in completions)
	"method_replacement" : "\\(.*?\\)(?![,\\)])",

	// Package validation using RegEx
	"package_name_match" : "^([a-zA-Z_\\-$][a-zA-Z\\d_\\-$]*\\.)*[a-zA-Z_$][a-zA-Z\\d_$]*$",

	// Package matching using RegEx
	"package_match" : "^([a-zA-Z_\\-$][a-zA-Z\\d_\\-$]*\\.)*",

	// Class in package matching using RegEx
	"package_class_match" : "([a-zA-Z_$][a-zA-Z\\d_$]*)$",

	// Package scope selector (Use in Organize Imports)
	"package_meta_selector" : "meta.package.java",

	// Import scope selector (Use in Organize Imports)
	"import_meta_selector" : "meta.import.java",

	// Package in package keyword scope selector (Use in Organize Imports)
	"package_name_selector" : "storage.modifier.package.java",

	// Class name scope selector (Use in Organize Imports)
	"class_name_selector" : "entity.name.type.class.java",

	// Package in import keyword scope selector (Use in Organize Imports)
	"package_import_selector" : "storage.modifier.import.java",

	// Types and classes scope selector (Use in Organize Imports)
	"type_selector" : "storage.type.java|storage.type.generic.java|storage.type.annotation.java|entity.other.inherited-class",

	// Primitive types fallback (default Java syntax is not 100% syntax perfect)
	"primitive_type" : ["void", "boolean", "byte", "char", "short", "int", "float", "long", "double"]
}